using ItaSystem.DTE.WS.EnvioBoleta;using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Net;using System.Net.Http;using System.Net.Http.Headers;using System.Text;using System.Threading.Tasks;using System.Xml;using System.Xml.Linq;using static ITA_CHILE.Enum.Ambiente;namespace ITA_CHILE.WS{    public class HttpServices    {        private string getSemillaCertificacionUrl { get { return "https://apicert.sii.cl/recursos/v1/boleta.electronica.semilla"; } }        private string getSemillaProduccionUrl { get { return "https://api.sii.cl/recursos/v1/boleta.electronica.semilla"; } }                private string getTokenCertificacionUrl { get { return "https://apicert.sii.cl/recursos/v1/boleta.electronica.token"; } }        private string getTokenProduccionUrl { get { return "https://api.sii.cl/recursos/v1/boleta.electronica.token"; } }                private string sendEnvioBoletaCertificacionUrl { get { return "https://pangal.sii.cl/recursos/v1/boleta.electronica.envio"; } }        private string sendEnvioBoletaProduccionUrl { get { return "https://rahue.sii.cl/recursos/v1/boleta.electronica.envio"; } }                private string getEstadoDTECertificacion { get { return "https://apicert.sii.cl/recursos/v1/boleta.electronica/"; } }        private string getEstadoDTEProduccion { get { return "https://api.sii.cl/recursos/v1/boleta.electronica/"; } }                private string getEstadoEnvioCertificacion { get { return "https://apicert.sii.cl/recursos/v1/boleta.electronica.envio/"; } }        private string getEstadoEnvioProduccion { get { return "https://api.sii.cl/recursos/v1/boleta.electronica.envio/"; } }        public string baseUrl;        public async Task<string> WSGetSemilla(AmbienteEnum ambiente)        {            using (var httpClient = new HttpClient())            {                baseUrl = ambiente == AmbienteEnum.Certificacion ? getSemillaCertificacionUrl : getSemillaProduccionUrl;                try {                    httpClient.DefaultRequestHeaders.Accept.Clear();                    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/xml"));                    using (var response = httpClient.GetAsync(baseUrl).Result)                    {                        string apiResponse = await response.Content.ReadAsStringAsync();                        return apiResponse;                    };                                }                catch(Exception ex)                 {                    return ex.Message;                }                            }        }        public async Task<string> WSGetToken(string signedSeed, AmbienteEnum ambiente)        {            baseUrl = ambiente == AmbienteEnum.Certificacion ? getTokenCertificacionUrl : getTokenProduccionUrl;            using (var httpClient = new HttpClient())            {                httpClient.DefaultRequestHeaders.Accept.Clear();                httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/xml"));                using (var response = httpClient.PostAsync(baseUrl, new StringContent(signedSeed, Encoding.UTF8, "application/xml")).Result)                {                    string apiResponse = await response.Content.ReadAsStringAsync();                    return apiResponse;                };            }        }        public string WSPostEnvio(BodyEnvioBoleta bodyInput, string token, string pathFile, out string error, AmbienteEnum ambiente)        {            baseUrl = ambiente == AmbienteEnum.Certificacion ? sendEnvioBoletaCertificacionUrl : sendEnvioBoletaProduccionUrl;            error = string.Empty;            byte[] archivo = File.ReadAllBytes(pathFile);            XDocument xdocument = XDocument.Load(pathFile, LoadOptions.PreserveWhitespace);            StringBuilder secuencia = new StringBuilder();            secuencia.Append("--7d23e2a11301c4\r\n");            secuencia.Append("Content-Disposition: form-data; name=\"rutSender\"\r\n");            secuencia.Append("\r\n");            secuencia.Append(bodyInput.rutSender + "\r\n");            secuencia.Append("--7d23e2a11301c4\r\n");            secuencia.Append("Content-Disposition: form-data; name=\"dvSender\"\r\n");            secuencia.Append("\r\n");            secuencia.Append((bodyInput.dvSender).ToUpper() + "\r\n");            secuencia.Append("--7d23e2a11301c4\r\n");            secuencia.Append("Content-Disposition: form-data; name=\"rutCompany\"\r\n");            secuencia.Append("\r\n");            secuencia.Append(bodyInput.rutCompany + "\r\n");            secuencia.Append("--7d23e2a11301c4\r\n");            secuencia.Append("Content-Disposition: form-data; name=\"dvCompany\"\r\n");            secuencia.Append("\r\n");            secuencia.Append(bodyInput.dvCompany + "\r\n");            secuencia.Append("--7d23e2a11301c4\r\n");            secuencia.Append("Content-Disposition: form-data; name=\"archivo\"; filename=\"" + bodyInput.archivo + "\"\r\n");            secuencia.Append("Content-Type: text/xml\r\n");            secuencia.Append("\r\n");            secuencia.Append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");            secuencia.Append(xdocument.ToString(SaveOptions.DisableFormatting));            secuencia.Append("\r\n");            secuencia.Append("--7d23e2a11301c4--\r\n");            string pMethod = "POST";            string pAccept = "image/gif, image/x-xbitmap, image/jpeg, image/pjpeg,application/vnd.ms-powerpoint, application/ms-excel,application/msword, */*";            string pReferer = "";            string pToken = "TOKEN={0}";            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(baseUrl);            request.Method = pMethod;            request.Accept = pAccept;            request.Referer = pReferer;            request.ContentType = "multipart/form-data: boundary=7d23e2a11301c4";            request.ContentLength = secuencia.Length;            request.Headers.Add("Accept-Language", "es-cl");            request.Headers.Add("Accept-Encoding", "gzip, deflate");            request.Headers.Add("Cache-Control", "no-cache");            request.Headers.Add("Cookie", string.Format(pToken, token));            request.UserAgent = "Mozilla/4.0 (compatible; PROG 1.0; Windows NT 5.0; YComp 5.0.2.4)";            request.KeepAlive = true;            try            {                using (StreamWriter sw = new StreamWriter(request.GetRequestStream(), Encoding.GetEncoding("ISO-8859-1")))                {                    sw.Write(secuencia.ToString());                }            }            catch (Exception ex)            {                error = ex.Message + ex.StackTrace;                return null;            }            string respuestaSii = string.Empty;            try            {                using (HttpWebResponse response = (HttpWebResponse)request.GetResponse())                {                    using (StreamReader sr = new StreamReader(response.GetResponseStream()))                    {                        respuestaSii = sr.ReadToEnd().Trim();                    }                }                if (string.IsNullOrEmpty(respuestaSii))                    throw new ArgumentNullException("Respuesta del SII es null");                         }            catch (Exception ex)            {                error = ex.Message + ex.StackTrace;                return string.Empty;            }            return respuestaSii;        }        public string WSGetEstadoDTE(int rutEmpresa, string dvEmpresa, int rutReceptor, string dvReceptor, int TipoDTE, int FolioDTE, DateTime FechaDTE, int MontoDTE, AmbienteEnum ambiente, string tokenPath, string nombreCertificado, string passwordCertificado, out string error)        {            #region Autorizacion            HttpServices httpServices = new HttpServices();            string message = "";            error = "";            string token = ItaSystem.DTE.WS.Autorizacion.AutenticarRest.GetToken(nombreCertificado, ambiente, tokenPath, out message, passwordCertificado);            if (!String.IsNullOrEmpty(message))            {                token = string.Empty;                error = "Error al recuperar el token." + Environment.NewLine + Environment.NewLine + "Error: " + message;                return null;            }            #endregion            using (var httpClient = new HttpClient())            {                string salida = "";                var sufix = $"{rutEmpresa}-{dvEmpresa}-{TipoDTE}-{FolioDTE}/estado?rut_receptor={rutReceptor}&dv_receptor={dvReceptor}&monto={MontoDTE}&fechaEmision={FechaDTE.ToString("dd-MM-yyyy")}";                baseUrl = ambiente == AmbienteEnum.Certificacion ? getEstadoDTECertificacion + sufix : getEstadoDTEProduccion + sufix;                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(baseUrl);                request.Headers.Add("Cookie", $"TOKEN={token}");                request.Method = "GET";                request.ContentType = "application/json";                request.KeepAlive = true;                request.Accept = "*/*";                try                {                    HttpWebResponse response = request.GetResponse() as HttpWebResponse;                    if (response.StatusCode == HttpStatusCode.OK)                    {                        using (Stream respStream = response.GetResponseStream())                        {                            StreamReader reader = new StreamReader(respStream, Encoding.UTF8);                            salida = reader.ReadToEnd();                        }                    }                }                catch (WebException ex)                {                    using (var reader = new System.IO.StreamReader(ex.Response.GetResponseStream()))                    {                        salida = reader.ReadToEnd();                        return salida;                    }                }                return salida;            }        }        public string WSGetEstadoEnvio(int rutEmpresa, string dvEmpresa, long trackId, AmbienteEnum ambiente, string tokenPath, string nombreCertificado, string passwordCertificado, out string error)        {            #region Autorizacion            HttpServices httpServices = new HttpServices();            string message = "";            error = "";            string token = ItaSystem.DTE.WS.Autorizacion.AutenticarRest.GetToken(nombreCertificado, ambiente, tokenPath, out message, passwordCertificado);            if (!String.IsNullOrEmpty(message))            {                token = string.Empty;                error = "Error al recuperar el token." + Environment.NewLine + Environment.NewLine + "Error: " + message;                return null;            }            #endregion            using (var httpClient = new HttpClient())            {                string salida = "";                var sufix = $"{rutEmpresa}-{dvEmpresa}-{trackId}";                baseUrl = ambiente == AmbienteEnum.Certificacion ? getEstadoEnvioCertificacion + sufix : getEstadoEnvioProduccion + sufix;                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(baseUrl);                request.Headers.Add("Cookie", $"TOKEN={token}");                request.Method = "GET";                request.ContentType = "application/json";                request.KeepAlive = true;                request.Accept = "*/*";                try                {                    HttpWebResponse response = request.GetResponse() as HttpWebResponse;                    if (response.StatusCode == HttpStatusCode.OK)                    {                        using (Stream respStream = response.GetResponseStream())                        {                            StreamReader reader = new StreamReader(respStream, Encoding.UTF8);                            salida = reader.ReadToEnd();                        }                    }                }                catch (WebException ex)                {                    using (var reader = new System.IO.StreamReader(ex.Response.GetResponseStream()))                    {                        salida = reader.ReadToEnd();                        return salida;                    }                }                return salida;            }        }    }}